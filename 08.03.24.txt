import psycopg2
from psycopg2 import sql

def create_connection():
    try:
        connection = psycopg2.connect(user="your_username",
                                      password="your_password",
                                      host="your_host",
                                      port="your_port",
                                      database="your_database")
        return connection
    except (Exception, psycopg2.Error) as error:
        print("Error while connecting to PostgreSQL", error)
        return None

def create_table():
    connection = create_connection()
    if connection is None:
        return
    try:
        cursor = connection.cursor()
        create_query = """
        CREATE TABLE IF NOT EXISTS test_table (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            age INT NOT NULL
        );
        """
        cursor.execute(create_query)
        connection.commit()
        print("Table created successfully!")
    except (Exception, psycopg2.Error) as error:
        print("Error while creating table in PostgreSQL", error)
    finally:
        if connection:
            cursor.close()
            connection.close()

def insert_row(name, age):
    connection = create_connection()
    if connection is None:
        return
    try:
        cursor = connection.cursor()
        insert_query = "INSERT INTO test_table (name, age) VALUES (%s, %s);"
        cursor.execute(insert_query, (name, age))
        connection.commit()
        print("Row inserted successfully!")
    except (Exception, psycopg2.Error) as error:
        print("Error while inserting row into PostgreSQL", error)
    finally:
        if connection:
            cursor.close()
            connection.close()

def delete_row(row_id):
    connection = create_connection()
    if connection is None:
        return
    try:
        cursor = connection.cursor()
        delete_query = "DELETE FROM test_table WHERE id = %s;"
        cursor.execute(delete_query, (row_id,))
        connection.commit()
        print("Row deleted successfully!")
    except (Exception, psycopg2.Error) as error:
        print("Error while deleting row from PostgreSQL", error)
    finally:
        if connection:
            cursor.close()
            connection.close()

def read_all_rows():
    connection = create_connection()
    if connection is None:
        return
    try:
        cursor = connection.cursor()
        read_query = "SELECT * FROM test_table;"
        cursor.execute(read_query)
        rows = cursor.fetchall()
        for row in rows:
            print(row)
    except (Exception, psycopg2.Error) as error:
        print("Error while reading rows from PostgreSQL", error)
    finally:
        if connection:
            cursor.close()
            connection.close()

def transactional_operations():
    connection = create_connection()
    if connection is None:
        return
    try:
        cursor = connection.cursor()
        # Begin transaction
        connection.autocommit = False

        # Create table
        create_query = """
        CREATE TABLE IF NOT EXISTS test_table (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            age INT NOT NULL
        );
        """
        cursor.execute(create_query)

        # Insert rows
        insert_query = "INSERT INTO test_table (name, age) VALUES (%s, %s);"
        cursor.execute(insert_query, ("Alice", 30))
        cursor.execute(insert_query, ("Bob", 25))

        # Delete row
        delete_query = "DELETE FROM test_table WHERE name = %s;"
        cursor.execute(delete_query, ("Bob",))

        # Commit transaction
        connection.commit()
        print("Transactional operations completed successfully!")
    except (Exception, psycopg2.Error) as error:
        print("Error during transactional operations in PostgreSQL", error)
        connection.rollback()
    finally:
        if connection:
            cursor.close()
            connection.close()

# Example usage:
create_table()
insert_row("John", 40)
delete_row(1)
read_all_rows()
transactional_operations()
read_all_rows()
